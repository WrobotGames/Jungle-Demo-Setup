[gd_resource type="Shader" format=3 uid="uid://cgg0vuclhhip7"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx, world_vertex_coords;

uniform sampler2D Albedomap : source_color;
uniform sampler2D specular : source_color;
uniform vec4 Color : source_color;
uniform float Roughness;
uniform float Specular;
uniform sampler2D Detailmap;
uniform sampler2D Normalmap : hint_normal;
uniform float NormalStrength;
uniform vec4 Backlight : source_color;
uniform float Alpha_Scissor_Threshold;
global uniform vec3 cam_pos;
uniform float sway_speed = 1.0;
uniform float sway_strength = 0.05;
uniform float sway_phase_len = 8.0;
global uniform float render_dist_factor;

void vertex() {
    float strength = COLOR.r * sway_strength;
    VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed) * strength;
    VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412) * strength;
    VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123) * strength;
	COLOR.x = distance(VERTEX, cam_pos);
}

void fragment() {
	float fade_distance = COLOR.x;
 	if (fade_distance > render_dist_factor * 28.){

		const vec3 magic = vec3(0.06711056f, 0.00583715f, 52.9829189f);		float fade = clamp(smoothstep(render_dist_factor * 32.,render_dist_factor * 28., fade_distance), 0.0, 1.0);
		if (fade < 0.001 || fade < fract(magic.z * fract(dot(FRAGCOORD.xy, magic.xy)))) {
			discard;
		}
	}
	vec4 albedo = texture(Albedomap, UV);
	albedo.xyz *= Color.xyz;
	ALBEDO = albedo.xyz * vec3(1.1,1.1,0.7);
	ALBEDO = albedo.xyz * vec3(0.95,0.85,0.6);
	ALPHA = albedo.a;
	ROUGHNESS = Roughness;
	//SPECULAR = Specular;
	SPECULAR = texture(specular, vec2( texture(Detailmap, UV).b, 0)).x * Specular * clamp(smoothstep(32. * render_dist_factor, 20. * render_dist_factor, length(VERTEX)), 0.0, 1.0);
	if (!FRONT_FACING){
		NORMAL *= vec3(-1.);
	}
	NORMAL_MAP = texture(Normalmap, UV).xyz;
	NORMAL_MAP_DEPTH = NormalStrength;
	//BACKLIGHT = Backlight.xyz;
	ALPHA_SCISSOR_THRESHOLD = Alpha_Scissor_Threshold;
}
"
