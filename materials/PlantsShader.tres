[gd_resource type="Shader" format=3 uid="uid://ba21i31rkl3e6"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.dev3's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float alpha_scissor_threshold;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform sampler2D WorldNoise : filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform vec4 backlight : source_color;
uniform sampler2D texture_backlight : hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

uniform float sway_speed = 0.01;
uniform float sway_strength = 0.1;
uniform float sway_phase_len = 8.0;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	float strength = COLOR.r * sway_strength;
	//VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed) * strength;
	//VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412) * strength;
	//VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123) * strength;
	VERTEX.x += (-.5 + texture(WorldNoise, VERTEX.xz * vec2(0.01) + vec2(TIME * sway_speed)).r) * strength;
	VERTEX.y += (-.5 + texture(WorldNoise, VERTEX.xz * vec2(0.01) + vec2(TIME * sway_speed)).r) * strength;
	VERTEX.z += (-.5 + texture(WorldNoise, VERTEX.xz * vec2(0.01) + vec2(TIME * sway_speed)).r) * strength;
}





vec3 desaturate(vec3 color, float amount)
{
    vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));
    return vec3(mix(color, gray, amount));
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = desaturate( albedo.rgb * albedo_tex.rgb, 0.2) * vec3(1.0,1.,.9);
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
	//ALPHA_SCISSOR_THRESHOLD = 0.4;
	vec3 backlight_tex = texture(texture_backlight,base_uv).rgb;
	BACKLIGHT = (backlight.rgb+backlight_tex);
}
"
